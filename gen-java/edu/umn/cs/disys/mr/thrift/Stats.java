/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.umn.cs.disys.mr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-20")
public class Stats implements org.apache.thrift.TBase<Stats, Stats._Fields>, java.io.Serializable, Cloneable, Comparable<Stats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Stats");

  private static final org.apache.thrift.protocol.TField SORT_TASKS_STARTED_FIELD_DESC = new org.apache.thrift.protocol.TField("sortTasksStarted", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SORT_TASKS_COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("sortTasksCompleted", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_SORT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSortTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MERGE_TASKS_STARTED_FIELD_DESC = new org.apache.thrift.protocol.TField("mergeTasksStarted", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MERGE_TASKS_COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("mergeTasksCompleted", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_MERGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMergeTime", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatsTupleSchemeFactory());
  }

  public int sortTasksStarted; // required
  public int sortTasksCompleted; // required
  public long totalSortTime; // required
  public int mergeTasksStarted; // required
  public int mergeTasksCompleted; // required
  public long totalMergeTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SORT_TASKS_STARTED((short)1, "sortTasksStarted"),
    SORT_TASKS_COMPLETED((short)2, "sortTasksCompleted"),
    TOTAL_SORT_TIME((short)3, "totalSortTime"),
    MERGE_TASKS_STARTED((short)4, "mergeTasksStarted"),
    MERGE_TASKS_COMPLETED((short)5, "mergeTasksCompleted"),
    TOTAL_MERGE_TIME((short)6, "totalMergeTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SORT_TASKS_STARTED
          return SORT_TASKS_STARTED;
        case 2: // SORT_TASKS_COMPLETED
          return SORT_TASKS_COMPLETED;
        case 3: // TOTAL_SORT_TIME
          return TOTAL_SORT_TIME;
        case 4: // MERGE_TASKS_STARTED
          return MERGE_TASKS_STARTED;
        case 5: // MERGE_TASKS_COMPLETED
          return MERGE_TASKS_COMPLETED;
        case 6: // TOTAL_MERGE_TIME
          return TOTAL_MERGE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SORTTASKSSTARTED_ISSET_ID = 0;
  private static final int __SORTTASKSCOMPLETED_ISSET_ID = 1;
  private static final int __TOTALSORTTIME_ISSET_ID = 2;
  private static final int __MERGETASKSSTARTED_ISSET_ID = 3;
  private static final int __MERGETASKSCOMPLETED_ISSET_ID = 4;
  private static final int __TOTALMERGETIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SORT_TASKS_STARTED, new org.apache.thrift.meta_data.FieldMetaData("sortTasksStarted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT_TASKS_COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("sortTasksCompleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_SORT_TIME, new org.apache.thrift.meta_data.FieldMetaData("totalSortTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERGE_TASKS_STARTED, new org.apache.thrift.meta_data.FieldMetaData("mergeTasksStarted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MERGE_TASKS_COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("mergeTasksCompleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MERGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("totalMergeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Stats.class, metaDataMap);
  }

  public Stats() {
  }

  public Stats(
    int sortTasksStarted,
    int sortTasksCompleted,
    long totalSortTime,
    int mergeTasksStarted,
    int mergeTasksCompleted,
    long totalMergeTime)
  {
    this();
    this.sortTasksStarted = sortTasksStarted;
    setSortTasksStartedIsSet(true);
    this.sortTasksCompleted = sortTasksCompleted;
    setSortTasksCompletedIsSet(true);
    this.totalSortTime = totalSortTime;
    setTotalSortTimeIsSet(true);
    this.mergeTasksStarted = mergeTasksStarted;
    setMergeTasksStartedIsSet(true);
    this.mergeTasksCompleted = mergeTasksCompleted;
    setMergeTasksCompletedIsSet(true);
    this.totalMergeTime = totalMergeTime;
    setTotalMergeTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Stats(Stats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sortTasksStarted = other.sortTasksStarted;
    this.sortTasksCompleted = other.sortTasksCompleted;
    this.totalSortTime = other.totalSortTime;
    this.mergeTasksStarted = other.mergeTasksStarted;
    this.mergeTasksCompleted = other.mergeTasksCompleted;
    this.totalMergeTime = other.totalMergeTime;
  }

  public Stats deepCopy() {
    return new Stats(this);
  }

  @Override
  public void clear() {
    setSortTasksStartedIsSet(false);
    this.sortTasksStarted = 0;
    setSortTasksCompletedIsSet(false);
    this.sortTasksCompleted = 0;
    setTotalSortTimeIsSet(false);
    this.totalSortTime = 0;
    setMergeTasksStartedIsSet(false);
    this.mergeTasksStarted = 0;
    setMergeTasksCompletedIsSet(false);
    this.mergeTasksCompleted = 0;
    setTotalMergeTimeIsSet(false);
    this.totalMergeTime = 0;
  }

  public int getSortTasksStarted() {
    return this.sortTasksStarted;
  }

  public Stats setSortTasksStarted(int sortTasksStarted) {
    this.sortTasksStarted = sortTasksStarted;
    setSortTasksStartedIsSet(true);
    return this;
  }

  public void unsetSortTasksStarted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTTASKSSTARTED_ISSET_ID);
  }

  /** Returns true if field sortTasksStarted is set (has been assigned a value) and false otherwise */
  public boolean isSetSortTasksStarted() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTTASKSSTARTED_ISSET_ID);
  }

  public void setSortTasksStartedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTTASKSSTARTED_ISSET_ID, value);
  }

  public int getSortTasksCompleted() {
    return this.sortTasksCompleted;
  }

  public Stats setSortTasksCompleted(int sortTasksCompleted) {
    this.sortTasksCompleted = sortTasksCompleted;
    setSortTasksCompletedIsSet(true);
    return this;
  }

  public void unsetSortTasksCompleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTTASKSCOMPLETED_ISSET_ID);
  }

  /** Returns true if field sortTasksCompleted is set (has been assigned a value) and false otherwise */
  public boolean isSetSortTasksCompleted() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTTASKSCOMPLETED_ISSET_ID);
  }

  public void setSortTasksCompletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTTASKSCOMPLETED_ISSET_ID, value);
  }

  public long getTotalSortTime() {
    return this.totalSortTime;
  }

  public Stats setTotalSortTime(long totalSortTime) {
    this.totalSortTime = totalSortTime;
    setTotalSortTimeIsSet(true);
    return this;
  }

  public void unsetTotalSortTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSORTTIME_ISSET_ID);
  }

  /** Returns true if field totalSortTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSortTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSORTTIME_ISSET_ID);
  }

  public void setTotalSortTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSORTTIME_ISSET_ID, value);
  }

  public int getMergeTasksStarted() {
    return this.mergeTasksStarted;
  }

  public Stats setMergeTasksStarted(int mergeTasksStarted) {
    this.mergeTasksStarted = mergeTasksStarted;
    setMergeTasksStartedIsSet(true);
    return this;
  }

  public void unsetMergeTasksStarted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERGETASKSSTARTED_ISSET_ID);
  }

  /** Returns true if field mergeTasksStarted is set (has been assigned a value) and false otherwise */
  public boolean isSetMergeTasksStarted() {
    return EncodingUtils.testBit(__isset_bitfield, __MERGETASKSSTARTED_ISSET_ID);
  }

  public void setMergeTasksStartedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERGETASKSSTARTED_ISSET_ID, value);
  }

  public int getMergeTasksCompleted() {
    return this.mergeTasksCompleted;
  }

  public Stats setMergeTasksCompleted(int mergeTasksCompleted) {
    this.mergeTasksCompleted = mergeTasksCompleted;
    setMergeTasksCompletedIsSet(true);
    return this;
  }

  public void unsetMergeTasksCompleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERGETASKSCOMPLETED_ISSET_ID);
  }

  /** Returns true if field mergeTasksCompleted is set (has been assigned a value) and false otherwise */
  public boolean isSetMergeTasksCompleted() {
    return EncodingUtils.testBit(__isset_bitfield, __MERGETASKSCOMPLETED_ISSET_ID);
  }

  public void setMergeTasksCompletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERGETASKSCOMPLETED_ISSET_ID, value);
  }

  public long getTotalMergeTime() {
    return this.totalMergeTime;
  }

  public Stats setTotalMergeTime(long totalMergeTime) {
    this.totalMergeTime = totalMergeTime;
    setTotalMergeTimeIsSet(true);
    return this;
  }

  public void unsetTotalMergeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMERGETIME_ISSET_ID);
  }

  /** Returns true if field totalMergeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMergeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMERGETIME_ISSET_ID);
  }

  public void setTotalMergeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMERGETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SORT_TASKS_STARTED:
      if (value == null) {
        unsetSortTasksStarted();
      } else {
        setSortTasksStarted((Integer)value);
      }
      break;

    case SORT_TASKS_COMPLETED:
      if (value == null) {
        unsetSortTasksCompleted();
      } else {
        setSortTasksCompleted((Integer)value);
      }
      break;

    case TOTAL_SORT_TIME:
      if (value == null) {
        unsetTotalSortTime();
      } else {
        setTotalSortTime((Long)value);
      }
      break;

    case MERGE_TASKS_STARTED:
      if (value == null) {
        unsetMergeTasksStarted();
      } else {
        setMergeTasksStarted((Integer)value);
      }
      break;

    case MERGE_TASKS_COMPLETED:
      if (value == null) {
        unsetMergeTasksCompleted();
      } else {
        setMergeTasksCompleted((Integer)value);
      }
      break;

    case TOTAL_MERGE_TIME:
      if (value == null) {
        unsetTotalMergeTime();
      } else {
        setTotalMergeTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SORT_TASKS_STARTED:
      return getSortTasksStarted();

    case SORT_TASKS_COMPLETED:
      return getSortTasksCompleted();

    case TOTAL_SORT_TIME:
      return getTotalSortTime();

    case MERGE_TASKS_STARTED:
      return getMergeTasksStarted();

    case MERGE_TASKS_COMPLETED:
      return getMergeTasksCompleted();

    case TOTAL_MERGE_TIME:
      return getTotalMergeTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SORT_TASKS_STARTED:
      return isSetSortTasksStarted();
    case SORT_TASKS_COMPLETED:
      return isSetSortTasksCompleted();
    case TOTAL_SORT_TIME:
      return isSetTotalSortTime();
    case MERGE_TASKS_STARTED:
      return isSetMergeTasksStarted();
    case MERGE_TASKS_COMPLETED:
      return isSetMergeTasksCompleted();
    case TOTAL_MERGE_TIME:
      return isSetTotalMergeTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Stats)
      return this.equals((Stats)that);
    return false;
  }

  public boolean equals(Stats that) {
    if (that == null)
      return false;

    boolean this_present_sortTasksStarted = true;
    boolean that_present_sortTasksStarted = true;
    if (this_present_sortTasksStarted || that_present_sortTasksStarted) {
      if (!(this_present_sortTasksStarted && that_present_sortTasksStarted))
        return false;
      if (this.sortTasksStarted != that.sortTasksStarted)
        return false;
    }

    boolean this_present_sortTasksCompleted = true;
    boolean that_present_sortTasksCompleted = true;
    if (this_present_sortTasksCompleted || that_present_sortTasksCompleted) {
      if (!(this_present_sortTasksCompleted && that_present_sortTasksCompleted))
        return false;
      if (this.sortTasksCompleted != that.sortTasksCompleted)
        return false;
    }

    boolean this_present_totalSortTime = true;
    boolean that_present_totalSortTime = true;
    if (this_present_totalSortTime || that_present_totalSortTime) {
      if (!(this_present_totalSortTime && that_present_totalSortTime))
        return false;
      if (this.totalSortTime != that.totalSortTime)
        return false;
    }

    boolean this_present_mergeTasksStarted = true;
    boolean that_present_mergeTasksStarted = true;
    if (this_present_mergeTasksStarted || that_present_mergeTasksStarted) {
      if (!(this_present_mergeTasksStarted && that_present_mergeTasksStarted))
        return false;
      if (this.mergeTasksStarted != that.mergeTasksStarted)
        return false;
    }

    boolean this_present_mergeTasksCompleted = true;
    boolean that_present_mergeTasksCompleted = true;
    if (this_present_mergeTasksCompleted || that_present_mergeTasksCompleted) {
      if (!(this_present_mergeTasksCompleted && that_present_mergeTasksCompleted))
        return false;
      if (this.mergeTasksCompleted != that.mergeTasksCompleted)
        return false;
    }

    boolean this_present_totalMergeTime = true;
    boolean that_present_totalMergeTime = true;
    if (this_present_totalMergeTime || that_present_totalMergeTime) {
      if (!(this_present_totalMergeTime && that_present_totalMergeTime))
        return false;
      if (this.totalMergeTime != that.totalMergeTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sortTasksStarted = true;
    list.add(present_sortTasksStarted);
    if (present_sortTasksStarted)
      list.add(sortTasksStarted);

    boolean present_sortTasksCompleted = true;
    list.add(present_sortTasksCompleted);
    if (present_sortTasksCompleted)
      list.add(sortTasksCompleted);

    boolean present_totalSortTime = true;
    list.add(present_totalSortTime);
    if (present_totalSortTime)
      list.add(totalSortTime);

    boolean present_mergeTasksStarted = true;
    list.add(present_mergeTasksStarted);
    if (present_mergeTasksStarted)
      list.add(mergeTasksStarted);

    boolean present_mergeTasksCompleted = true;
    list.add(present_mergeTasksCompleted);
    if (present_mergeTasksCompleted)
      list.add(mergeTasksCompleted);

    boolean present_totalMergeTime = true;
    list.add(present_totalMergeTime);
    if (present_totalMergeTime)
      list.add(totalMergeTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(Stats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSortTasksStarted()).compareTo(other.isSetSortTasksStarted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortTasksStarted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortTasksStarted, other.sortTasksStarted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortTasksCompleted()).compareTo(other.isSetSortTasksCompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortTasksCompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortTasksCompleted, other.sortTasksCompleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSortTime()).compareTo(other.isSetTotalSortTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSortTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSortTime, other.totalSortTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMergeTasksStarted()).compareTo(other.isSetMergeTasksStarted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMergeTasksStarted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mergeTasksStarted, other.mergeTasksStarted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMergeTasksCompleted()).compareTo(other.isSetMergeTasksCompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMergeTasksCompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mergeTasksCompleted, other.mergeTasksCompleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMergeTime()).compareTo(other.isSetTotalMergeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMergeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMergeTime, other.totalMergeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Stats(");
    boolean first = true;

    sb.append("sortTasksStarted:");
    sb.append(this.sortTasksStarted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortTasksCompleted:");
    sb.append(this.sortTasksCompleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSortTime:");
    sb.append(this.totalSortTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mergeTasksStarted:");
    sb.append(this.mergeTasksStarted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mergeTasksCompleted:");
    sb.append(this.mergeTasksCompleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMergeTime:");
    sb.append(this.totalMergeTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatsStandardSchemeFactory implements SchemeFactory {
    public StatsStandardScheme getScheme() {
      return new StatsStandardScheme();
    }
  }

  private static class StatsStandardScheme extends StandardScheme<Stats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Stats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SORT_TASKS_STARTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortTasksStarted = iprot.readI32();
              struct.setSortTasksStartedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SORT_TASKS_COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortTasksCompleted = iprot.readI32();
              struct.setSortTasksCompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_SORT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalSortTime = iprot.readI64();
              struct.setTotalSortTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MERGE_TASKS_STARTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mergeTasksStarted = iprot.readI32();
              struct.setMergeTasksStartedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MERGE_TASKS_COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mergeTasksCompleted = iprot.readI32();
              struct.setMergeTasksCompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_MERGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalMergeTime = iprot.readI64();
              struct.setTotalMergeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Stats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SORT_TASKS_STARTED_FIELD_DESC);
      oprot.writeI32(struct.sortTasksStarted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_TASKS_COMPLETED_FIELD_DESC);
      oprot.writeI32(struct.sortTasksCompleted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_SORT_TIME_FIELD_DESC);
      oprot.writeI64(struct.totalSortTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERGE_TASKS_STARTED_FIELD_DESC);
      oprot.writeI32(struct.mergeTasksStarted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERGE_TASKS_COMPLETED_FIELD_DESC);
      oprot.writeI32(struct.mergeTasksCompleted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MERGE_TIME_FIELD_DESC);
      oprot.writeI64(struct.totalMergeTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatsTupleSchemeFactory implements SchemeFactory {
    public StatsTupleScheme getScheme() {
      return new StatsTupleScheme();
    }
  }

  private static class StatsTupleScheme extends TupleScheme<Stats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Stats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSortTasksStarted()) {
        optionals.set(0);
      }
      if (struct.isSetSortTasksCompleted()) {
        optionals.set(1);
      }
      if (struct.isSetTotalSortTime()) {
        optionals.set(2);
      }
      if (struct.isSetMergeTasksStarted()) {
        optionals.set(3);
      }
      if (struct.isSetMergeTasksCompleted()) {
        optionals.set(4);
      }
      if (struct.isSetTotalMergeTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSortTasksStarted()) {
        oprot.writeI32(struct.sortTasksStarted);
      }
      if (struct.isSetSortTasksCompleted()) {
        oprot.writeI32(struct.sortTasksCompleted);
      }
      if (struct.isSetTotalSortTime()) {
        oprot.writeI64(struct.totalSortTime);
      }
      if (struct.isSetMergeTasksStarted()) {
        oprot.writeI32(struct.mergeTasksStarted);
      }
      if (struct.isSetMergeTasksCompleted()) {
        oprot.writeI32(struct.mergeTasksCompleted);
      }
      if (struct.isSetTotalMergeTime()) {
        oprot.writeI64(struct.totalMergeTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Stats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.sortTasksStarted = iprot.readI32();
        struct.setSortTasksStartedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sortTasksCompleted = iprot.readI32();
        struct.setSortTasksCompletedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalSortTime = iprot.readI64();
        struct.setTotalSortTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mergeTasksStarted = iprot.readI32();
        struct.setMergeTasksStartedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mergeTasksCompleted = iprot.readI32();
        struct.setMergeTasksCompletedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalMergeTime = iprot.readI64();
        struct.setTotalMergeTimeIsSet(true);
      }
    }
  }

}

